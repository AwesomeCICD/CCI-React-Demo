# version: 2.1

# orbs:
#   aws-cli: circleci/aws-cli@4.1.2
#   docker: circleci/docker@2.4.0
#   node: circleci/node@5.1.0
#   snyk: snyk/snyk@2.0.2

# jobs:

#   build:
#     docker: 
#       - image: cimg/node:17.2.0
#     resource_class: medium

#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - npm-deps-{{ checksum "package-lock.json" }}
#       - run: npm ci
#       - save_cache:
#           paths:
#             - ~/usr/local/lib/node_modules
#           key: npm-deps-{{ checksum "package-lock.json" }}

#   build-and-push-image:
#     executor: docker/machine
#     steps:
#       - checkout
#       - docker/check:
#           docker-username: DOCKERHUB_USERNAME
#           docker-password: DOCKERHUB_PASSWORD
#       - docker/build:
#           image: dvcastillo37/cci-react-demo
#           tag: aws-oidc-demo
#       - docker/push:
#           image: dvcastillo37/cci-react-demo
#           tag: aws-oidc-demo

#   deploy_image_to_aws:
#     executor: docker/machine
#     steps:
#       - run:
#           name: Pull new image
#           command: docker pull dvcastillo37/cci-react-demo:aws-oidc-demo
#       - aws-cli/setup:
#           profile-name: example-profile
#           role-arn: '${AWS_ROLE_ARN}'
#           role-session-name: example-session
#       - run:
#           name: auth to default registry
#           command: |
#             aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
#       - run:
#           name: tag most recent image
#           command: |
#             docker tag dvcastillo37/cci-react-demo:aws-oidc-demo ${AWS_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cci-react-demo:aws-oidc-demo
#       - run:
#           name: push image to aws ecr
#           command: |
#             docker push ${AWS_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cci-react-demo:aws-oidc-demo

# workflows:
#   build-test-and-approval-deploy:
#     jobs:
#       - lint_and_prettify
#       - build:
#           requires:
#             - lint_and_prettify
#       -  SAST:
#           requires:
#             - build
#       - node/test:
#           version: 17.2.0
#           requires:
#             - build
#       - hold:
#           type: approval
#           requires:
#             - node/test
#             - SAST
#       - build-and-push-image:
#           requires:
#             - hold
#       - deploy_image_to_aws:
#           requires:
#             - build-and-push-image
#           context: test


version: 2.1
orbs:
  compass: atlassian-labs/compass@0.1.2
  maven: circleci/maven@1.4
  aws-cli: circleci/aws-cli@4.1.2
  docker: circleci/docker@2.4.0
  node: circleci/node@5.1.0
  snyk: snyk/snyk@2.0.2

          
parameters:
  region:
    type: enum
    description: where we are deploying, a CERA cluster region
    enum: [ namer, emea, japac]
    default: namer
    
executors:
  with-chrome:
    docker:
      - image: 'cypress/browsers:node-20.6.1-chrome-116.0.5845.187-1-ff-117.0-edge-116.0.1938.76-1'

  base:
    docker:
      - image: cimg/deploy:2022.08

  jdk17:
    docker:
      - image: cimg/openjdk:17.0.3
    resource_class: xlarge

  python38:
    docker:
      - image: cimg/python:3.8


jobs:

  build-and-push-image:
    parameters:
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    docker:
      - image: cimg/node:21.4.0
    steps:
      - checkout
      - load-credentials:
          region: <<parameters.region>>
      - setup_remote_docker:
          docker_layer_caching: true
      - run: |
          echo "${DOCKER_PWD}" | docker login --username ${DOCKER_LOGIN} --password-stdin docker.nexus.<<parameters.region>>.circleci-labs.com   
      - docker/build:
          image: dvcastillo37/cci-react-demo
          tag: dc-db-demo-app
      - docker/push:
          image: dvcastillo37/cci-react-demo
          tag: dc-db-demo-app
   
workflows:
  main:
    jobs:
      - build-and-push-image:
          context: db-oidc
          region: <<pipeline.parameters.region>>
          name: build & Push [<<pipeline.parameters.region>>]


commands:
  load-credentials:
    parameters:
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    steps:
      - run:
          name: install vault agent (if not present)
          command: |
            vault -h && exit 0 || echo "Installing vault"
            #only runs if vault command avbove failed
            cd /tmp
            wget https://releases.hashicorp.com/vault/1.12.2/vault_1.12.2_linux_amd64.zip
            unzip vault_1.12.2_linux_amd64.zip
            sudo mv vault /usr/local/bin        
            vault -h    
      - run:
          name: Load Credentials from Vault
          command: |
            echo "Environment (APP_ENV ): $APP_ENV"
            export VAULT_ADDR="https://vault.<<parameters.region>>.circleci-labs.com"
            export VAULT_ROLE=dc-db-demo-app-deploy
            echo $VAULT_ROLE
            echo $CIRCLE_OIDC_TOKEN > .circleci/vault/token.json
            circleci env subst < .circleci/vault/agent.hcl.tpl > .circleci/vault/agent.hcl
            cat .circleci/vault/agent.hcl
            vault agent -config=.circleci/vault/agent.hcl
      - run:
          command: |
            source .circleci/vault/setenv
            #export for other steps
          name: Set Environment Variables from Vault
# VS Code Extension Version: 1.5.1