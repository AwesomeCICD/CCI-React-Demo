version: 2.1

parameters:
  cleanup:
    type: boolean
    default: false
    description: Should this run cleanup an old deploy?
  version:
    type: string
    default: ""
    description: the version (latest or prior) to be deleted
  job_name:
    type: string
    default: delete deployment

orbs:
  node: circleci/node@2.0.0
  snyk: snyk/snyk@1.1.2
  aws-ecr: circleci/aws-ecr@8.0.0
  kubernetes: circleci/kubernetes@1.3.0

commands:
  set-build-env:
    description: "Set environment variables needed for building"
    steps:
      - checkout
      - run:
          name: Setup Build Environment Variables
          command: |
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            source $BASH_ENV

workflows:
  build-test-and-approval-deploy:
    unless: << pipeline.parameters.cleanup >>
    jobs:
      - lint_and_prettify
      - build:
          requires:
            - lint_and_prettify
      -  SAST:
          requires:
            - build
      - node/test:
          version: 17.2.0
          requires:
            - build
      - hold:
          type: approval
          requires:
            - node/test
            - SAST
          filters:
            branches:
              only: 
                - main
                - vamp
      - aws-ecr/build-and-push-image:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          region: '${AWS_DEFAULT_REGION}'
          registry-id: AWS_ECR_REGISTRY_ID
          repo: cci-react-demo
          requires:
            - hold
          tag: ${VERSION}
          filters:
            branches:
              only:
                - main
                - vamp
      - update-deployment:
          requires:
            - hold
          filters:
            branches:
              only: vamp
  
  the-fixer:
    when: << pipeline.parameters.cleanup >>
    jobs:
      - delete-deployment:
          name: << pipeline.parameters.job_name >>


jobs:
  lint_and_prettify:
    docker: 
      - image: cimg/node:17.2.0
    resource_class: medium

    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "package-lock.json" }}
      - run: npm ci
      - run: sudo npm i -g eslint prettier --unsafe-perm=true --allow-root
      - run: eslint src/*.js && prettier --check "src/*.js"
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: npm-deps-{{ checksum "package-lock.json" }}

  SAST: 
    docker:
      - image: cimg/node:17.2.0
    steps:
      - checkout
      - run: npm ci
      - run: npm run build
      - snyk/scan

  build:
    docker: 
      - image: cimg/node:17.2.0
    resource_class: medium

    steps:
      - checkout
      - set-build-env
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "package-lock.json" }}
      - run: npm ci
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: npm-deps-{{ checksum "package-lock.json" }}

  update-deployment:
    docker: 
      - image: cimg/base:edge-18.04
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install gettext-base graphviz
      - set-build-env
      - run: 
          name: Update image & version in manifest
          command: |
            envsubst < vamp/demo-deployment.yml > modified-deployment.yaml
            cat modified-deployment.yaml
      - kubernetes/install-kubectl
      - run:
          name: Create minimal kubeconfig for Service Account
          command: |
            export DECODED_TOKEN=$(echo ${SE_DEMO_CLUSTER_CCI_USER_TOKEN} | base64 -d)
            echo LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1ETXhPREl4TWpZME5Wb1hEVE15TURNeE5USXhNalkwTlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS1RDCjJiczNGblZQWk56ZzJ4MVBoVzJDb2JydXFEaE5RZ2pRdG5DRlZyYlBzU3VUa2J0RXlqMk1MbTVBYmtkNlZkK3IKcmZTVXZmcmV4VmxPaFpwbk1vWmRuRDBsOVZHT2RxTW1kOWlBSk1sUG85akh1L2FkSkRsQXcwZVFtUENaYWpjSwppTEJNTW5oRmhQbnRNQ1FUTklXTyt4Ymg0Y3lrbXROTTBrMkJJZ3J3ajhXT2JSVFExWnZpc3UvTU9kdUhLUUpxCldOeTRndXlxRkJFOVZKNElCR3NvdkZJWUFEUGpKdlB1eEJPSUMvYkszVHdwRHBQSDVzVUdWUGd3b1lxUkdvWFQKaDByN2FzRkpwdmUxWk5mM3VhWVFlQTY1RjBqMndUQi90WlVDbXhoOE9tSjA2c2hubkRWbkNVLzRzLzhxaVNJRApLbEYvbDFCTi91NVhOMlJqL3M4Q0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZLYXVmL2kwSzNST0txUkREUENvQlowemplTFhNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFCWmJ1WGU3UlFSbHY5TThZK2VGK2s5Qk9oeWovK3BQMFpoR0V5UkJXVnlDMG16MzZVYgo5MTZVRnNqTzB3ZVp1TTBYMUJ1RlNjMzZ3SWE3SG13M01ORmN3OG9ReVdzUDkzMEptdDhWZmhRUkQ0STE2ZkxOCi95Y05CSjdzMmpGK2NBTGExTWtZeXd4S0FaWEJyMmtQNHNXWHBYUkdocjZmeVpvQ05VT3lPektuZjZkZzh1VGoKU09oQkJ4NnVFVy8wek16OFpTQjZjQURuSVgwQUExK1dvNzR2V1RXT3hVdUU0ZTdTR0llaFdxWDYrdSswRlUxMgpHcFdyMjdncWpvL2pCZ1I2UFF5cm8vVTdLbS93a1o5ckczRjUyK1QvOFBja1hwM2x0RHAxeVlQYVdTZVlFUlV2CkZKSHp0Yk9tTU5Pd1dCRFMxM3kxaVR0OVlNNnpnVHhSeklmKwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg== | base64 -d > ca.crt
            kubectl config set-cluster dcastillo-cepu --server=https://D6702688A2BB228851A37BF3F2FA6659.sk1.us-east-1.eks.amazonaws.com --certificate-authority=ca.crt
            kubectl config set-credentials davids-bot --token=${DECODED_TOKEN}
            kubectl config set-context cci --user=davids-bot --namespace=production --cluster=dcastillo-cepu
            kubectl config use-context cci
      - kubernetes/create-or-update-resource:
          namespace: production
          resource-file-path: modified-deployment.yaml
      - run: kubectl rollout status -f modified-deployment.yaml
      - run:
          name: Capture Contour routes as DAG
          command: |
            sleep 10 
            # let release agent catch deploy, tell contour to shape traffic. 
            # must be a smarter way
            vamp/get-dag-as-dot.sh
            cat contour-dag.dot
      - store_artifacts:
          path: contour-dag.png
    environment:
      DOCKER_IMAGE: cci-react-demo

  delete-deployment:
    docker: 
      - image: cimg/base:edge-18.04
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install graphviz
      - kubernetes/install-kubectl
      - run:
          name: Create minimal kubeconfig for Service Account
          command: |
            export DECODED_TOKEN=$(echo ${SE_DEMO_CLUSTER_CCI_USER_TOKEN} | base64 -d)
            echo LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1ETXhPREl4TWpZME5Wb1hEVE15TURNeE5USXhNalkwTlZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS1RDCjJiczNGblZQWk56ZzJ4MVBoVzJDb2JydXFEaE5RZ2pRdG5DRlZyYlBzU3VUa2J0RXlqMk1MbTVBYmtkNlZkK3IKcmZTVXZmcmV4VmxPaFpwbk1vWmRuRDBsOVZHT2RxTW1kOWlBSk1sUG85akh1L2FkSkRsQXcwZVFtUENaYWpjSwppTEJNTW5oRmhQbnRNQ1FUTklXTyt4Ymg0Y3lrbXROTTBrMkJJZ3J3ajhXT2JSVFExWnZpc3UvTU9kdUhLUUpxCldOeTRndXlxRkJFOVZKNElCR3NvdkZJWUFEUGpKdlB1eEJPSUMvYkszVHdwRHBQSDVzVUdWUGd3b1lxUkdvWFQKaDByN2FzRkpwdmUxWk5mM3VhWVFlQTY1RjBqMndUQi90WlVDbXhoOE9tSjA2c2hubkRWbkNVLzRzLzhxaVNJRApLbEYvbDFCTi91NVhOMlJqL3M4Q0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZLYXVmL2kwSzNST0txUkREUENvQlowemplTFhNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFCWmJ1WGU3UlFSbHY5TThZK2VGK2s5Qk9oeWovK3BQMFpoR0V5UkJXVnlDMG16MzZVYgo5MTZVRnNqTzB3ZVp1TTBYMUJ1RlNjMzZ3SWE3SG13M01ORmN3OG9ReVdzUDkzMEptdDhWZmhRUkQ0STE2ZkxOCi95Y05CSjdzMmpGK2NBTGExTWtZeXd4S0FaWEJyMmtQNHNXWHBYUkdocjZmeVpvQ05VT3lPektuZjZkZzh1VGoKU09oQkJ4NnVFVy8wek16OFpTQjZjQURuSVgwQUExK1dvNzR2V1RXT3hVdUU0ZTdTR0llaFdxWDYrdSswRlUxMgpHcFdyMjdncWpvL2pCZ1I2UFF5cm8vVTdLbS93a1o5ckczRjUyK1QvOFBja1hwM2x0RHAxeVlQYVdTZVlFUlV2CkZKSHp0Yk9tTU5Pd1dCRFMxM3kxaVR0OVlNNnpnVHhSeklmKwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg== | base64 -d > ca.crt
            kubectl config set-cluster dcastillo-cepu --server=https://D6702688A2BB228851A37BF3F2FA6659.sk1.us-east-1.eks.amazonaws.com --certificate-authority=ca.crt
            kubectl config set-credentials davids-bot --token=${DECODED_TOKEN}
            kubectl config set-context cci --user=davids-bot --namespace=production --cluster=dcastillo-cepu
            kubectl config use-context cci
      
      - run:
          name: Delete deployment << pipeline.parameters.version >>
          command: kubectl -n production delete deployment cci-react-demo-v<<pipeline.parameters.version>>
      - run:
          name: Capture Contour routes as DAG
          command: |
            sleep 2 
            # let release agent catch deploy, tell contour to shape traffic. 
            # must be a smarter way
            vamp/get-dag-as-dot.sh
            cat contour-dag.dot
      - store_artifacts:
          path: contour-dag.png
