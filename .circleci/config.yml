# version: 2.1

# orbs:
#   aws-cli: circleci/aws-cli@4.1.2
#   docker: circleci/docker@2.4.0
#   node: circleci/node@5.1.0
#   snyk: snyk/snyk@2.0.2

# jobs:
#   lint_and_prettify:
#     docker: 
#       - image: cimg/node:17.2.0
#     resource_class: medium

#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - npm-deps-{{ checksum "package-lock.json" }}
#       - run: npm ci
#       - run: sudo npm i -g eslint prettier --unsafe-perm=true --allow-root
#       - run: eslint src/*.js && prettier --check "src/*.js"
#       - save_cache:
#           paths:
#             - ~/usr/local/lib/node_modules
#           key: npm-deps-{{ checksum "package-lock.json" }}

#   SAST: 
#     docker:
#       - image: cimg/node:17.2.0
#     steps:
#       - checkout
#       - run: npm ci
#       - run: npm run build
#       - snyk/scan

#   build:
#     docker: 
#       - image: cimg/node:17.2.0
#     resource_class: medium

#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - npm-deps-{{ checksum "package-lock.json" }}
#       - run: npm ci
#       - save_cache:
#           paths:
#             - ~/usr/local/lib/node_modules
#           key: npm-deps-{{ checksum "package-lock.json" }}

#   build-and-push-image:
#     executor: docker/machine
#     steps:
#       - checkout
#       - docker/check:
#           docker-username: DOCKERHUB_USERNAME
#           docker-password: DOCKERHUB_PASSWORD
#       - docker/build:
#           image: dvcastillo37/cci-react-demo
#           tag: aws-oidc-demo
#       - docker/push:
#           image: dvcastillo37/cci-react-demo
#           tag: aws-oidc-demo

#   deploy_image_to_aws:
#     executor: docker/machine
#     steps:
#       - run:
#           name: Pull new image
#           command: docker pull dvcastillo37/cci-react-demo:aws-oidc-demo
#       - aws-cli/setup:
#           profile-name: example-profile
#           role-arn: '${AWS_ROLE_ARN}'
#           role-session-name: example-session
#       - run:
#           name: auth to default registry
#           command: |
#             aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
#       - run:
#           name: tag most recent image
#           command: |
#             docker tag dvcastillo37/cci-react-demo:aws-oidc-demo ${AWS_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cci-react-demo:aws-oidc-demo
#       - run:
#           name: push image to aws ecr
#           command: |
#             docker push ${AWS_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cci-react-demo:aws-oidc-demo

# workflows:
#   build-test-and-approval-deploy:
#     jobs:
#       - lint_and_prettify
#       - build:
#           requires:
#             - lint_and_prettify
#       -  SAST:
#           requires:
#             - build
#       - node/test:
#           version: 17.2.0
#           requires:
#             - build
#       - hold:
#           type: approval
#           requires:
#             - node/test
#             - SAST
#       - build-and-push-image:
#           requires:
#             - hold
#       - deploy_image_to_aws:
#           requires:
#             - build-and-push-image
#           context: test


version: 2.1
orbs:
  compass: atlassian-labs/compass@0.1.2
  maven: circleci/maven@1.4
  aws-cli: circleci/aws-cli@4.1.2
  docker: circleci/docker@2.4.0
  node: circleci/node@5.1.0
  snyk: snyk/snyk@2.0.2
          
parameters:
  region:
    type: enum
    description: where we are deploying, a CERA cluster region
    enum: [ namer, emea, japac]
    default: emea
    
executors:
  with-chrome:
    docker:
      - image: 'cypress/browsers:node-20.6.1-chrome-116.0.5845.187-1-ff-117.0-edge-116.0.1938.76-1'

  base:
    docker:
      - image: cimg/deploy:2022.08

  jdk17:
    docker:
      - image: cimg/openjdk:17.0.3
    resource_class: xlarge

  python38:
    docker:
      - image: cimg/python:3.8


jobs:

  build:
    docker: 
      - image: cimg/node:17.2.0
    resource_class: medium

    steps:
      - checkout
      - restore_cache:
          keys:
            - npm-deps-{{ checksum "package-lock.json" }}
      - run: npm ci
      - save_cache:
          paths:
            - ~/usr/local/lib/node_modules
          key: npm-deps-{{ checksum "package-lock.json" }}

  build-and-push-image:
    executor: docker/machine
    steps:
      - checkout
      - docker/check:
          docker-username: DOCKERHUB_USERNAME
          docker-password: DOCKERHUB_PASSWORD
      - docker/build:
          image: dvcastillo37/cci-react-demo
          tag: aws-oidc-demo
      - docker/push:
          image: dvcastillo37/cci-react-demo
          tag: aws-oidc-demo

  deploy_image_to_aws:
    executor: docker/machine
    steps:
      - run:
          name: Pull new image
          command: docker pull dvcastillo37/cci-react-demo:aws-oidc-demo
      - aws-cli/setup:
          profile-name: example-profile
          role-arn: '${AWS_ROLE_ARN}'
          role-session-name: example-session
      - run:
          name: auth to default registry
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      - run:
          name: tag most recent image
          command: |
            docker tag dvcastillo37/cci-react-demo:aws-oidc-demo ${AWS_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cci-react-demo:aws-oidc-demo
      - run:
          name: push image to aws ecr
          command: |
            docker push ${AWS_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cci-react-demo:aws-oidc-demo

  skaffold-build-push:
    parameters:
      boa-environment:
        type: string
        default: dev
        description: Environment suffix used by namesapce and SA account name.
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    docker: 
      - image: cimg/node:17.2.0
    resource_class: medium
    environment:
      APP_ENV: dev
    steps:
      - checkout
      # - run: |
      #     curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
      #     sudo install skaffold /usr/local/bin/
      - load-credentials:
          region: <<parameters.region>>
      - setup_remote_docker:
          docker_layer_caching: true
      # - restore_cache:
      #     keys:
      #       - v2-mvn-full-{{ .Branch }}
      #       - v2-mvn-full-
      # - restore_cache:
      #     keys:
      #       - v1-skaffold-{{ .Branch }}
      #       - v1-skaffold-
      - run: |
          echo "${DOCKER_PWD}" | docker login --username ${DOCKER_LOGIN} --password-stdin docker.nexus.<<parameters.region>>.circleci-labs.com
          # seems like skaffold jib needs a eird kick, hit me locally, passes on second run
          ./mvnw jib:_skaffold-fail-if-jib-out-of-date -Djib.requiredVersion=3.2.1 --projects src/ledgerwriter --also-make jib:_skaffold-files-v2 --quiet --batch-mode
          echo "Jib ready"
          mkdir output
          skaffold build --build-concurrency=4 --default-repo=docker.nexus.<<parameters.region>>.circleci-labs.com --file-output=output/tags.json
          ls /tmp/
      # - save_cache:
      #     key: v1-skaffold-{{ .Branch }}
      #     paths:
      #       - ~/.skaffold/cache
      # - persist_to_workspace:
      #     root: output
      #     paths: [ 'tags.json' ]
 

  deploy:
    executor: base
    parameters:
      boa-environment:
        type: string
        default: dev
        description: Environment suffix used by namesapce and SA account name.
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    environment:
      APP_ENV: <<parameters.boa-environment>>
      CERA_REGION: <<parameters.region>>
    steps:
      - checkout
      - load-credentials:
          region: <<parameters.region>>
      # all k8s info (cluster, ns, etc) came from vault.
      - run: echo "Now using ${K8S_USER}@${K8S_NAMESPACE}"
      - run: |
          sudo apt update && sudo apt install kubectl -y
          echo ${K8S_CERT} | base64 -d > ca.crt
          kubectl config set-cluster ${K8S_CLUSTER} --server=${K8S_URL} --certificate-authority=ca.crt
          export DECODED_TOKEN=$(echo ${K8S_TOKEN} | base64 -d) #kubectl prints an encoded value, MUST decode it to work.
          kubectl config set-credentials ${K8S_USER} --token=${DECODED_TOKEN}
          kubectl config set-context default --user=${K8S_USER}  --cluster=${K8S_CLUSTER} --namespace ${K8S_NAMESPACE}
          kubectl config use-context default
          kubectl get serviceaccounts -n ${K8S_NAMESPACE}
      - attach_workspace:
          at: output
      - run: 
          name: Deploy BoA
          command: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
            sudo install skaffold /usr/local/bin/
            export APP_VERSION="0.1.<<pipeline.number>>"
            export CIRCLE_PIPELINE_ID=<<pipeline.id>>
            #only kuztomizing frontend for D&R demo
            cat .circleci/release_tracking/kustomization.yaml | circleci env subst > dev-kubernetes-manifests/kustomization.yaml
            cat .circleci/release_tracking/template_patch.yaml | circleci env subst > dev-kubernetes-manifests/template_patch.yaml
            cat .circleci/release_tracking/virtual_service_region.yaml | circleci env subst > dev-kubernetes-manifests/virtual_service_region.yaml
            kubectl kustomize dev-kubernetes-manifests > dev-kubernetes-manifests/frontend-annotated.yaml
            skaffold deploy --default-repo=docker.nexus.<<parameters.region>>.circleci-labs.com --namespace=${K8S_NAMESPACE} --build-artifacts=output/tags.json
      - run:
          name: Wait for deployment
          command: |
            kubectl wait rollout -n ${K8S_NAMESPACE} frontend-rollout --for condition=Available=True --timeout=90s
      - run: 
          name: Print Frontend URL
          command: kubectl get service frontend -n ${K8S_NAMESPACE} | awk '{print $4}'
  e2e:
    executor: with-chrome
    parameters:
      boa-environment:
        type: string
        default: dev
        description: Environment suffix used by namesapce and SA account name.
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    steps:
      - checkout
      - run: 
          name: Run Cypress Tests
          command: |
            URL="https://<<parameters.region>>.circleci-labs.com"
            if [ "<<parameters.boa-environment>>" != "prod" ]; then
              URL="https://<<parameters.boa-environment>>.<<parameters.region>>.circleci-labs.com"
            fi
            echo "Testing against ${URL}"
            cd ui-tests
            npx cypress run \
            --config baseUrl=${URL} \
            --browser firefox \
            --reporter junit \
            --reporter-options "mochaFile=results/my-test-output-[hash].xml"
      - store_test_results:
          path: ui-tests/results
      - store_artifacts:
          path: ui-tests/cypress/videos
      - store_artifacts:
          path: ui-tests/cypress/screenshots    
   
workflows:
  main:
    jobs:
      - java-checkstyle:
          context: [ compass-integration-bank-of-aion ]
      - java-test-and-code-cov
      - python-checkstyle
      - python-test
      - skaffold-build-push:
          context: cera-vault-oidc
          region: <<pipeline.parameters.region>>
          name: Skaffold build & Push [<<pipeline.parameters.region>>]
      - deploy:
          name: Deploy Dev [<<pipeline.parameters.region>>]
          region: <<pipeline.parameters.region>>
          requires: [ 'Skaffold build & Push [<<pipeline.parameters.region>>]', python-test, java-test-and-code-cov ]
          context: [ compass-integration-bank-of-aion, cera-vault-oidc ]
          post-steps:
            - compass/notify_deployment:
                token_name: COMPASS_CCI_TOKEN
                environment_type: development
      - e2e:
          requires: [ 'Deploy Dev [<<pipeline.parameters.region>>]' ]
          region: <<pipeline.parameters.region>>
      - deploy:
          name: Deploy Production [<<pipeline.parameters.region>>]
          requires: [ e2e ]
          boa-environment: prod
          region: <<pipeline.parameters.region>>
          context: [ compass-integration-bank-of-aion, cera-vault-oidc-prod ]
          filters:
            branches:
              only: [ main ]
          post-steps:
            - compass/notify_deployment:
                token_name: COMPASS_CCI_TOKEN
                environment_type: production
                environment: CERA-Cluster-namer-Prod


commands:
  load-credentials:
    parameters:
      region:
        type: string
        description: where we are deploying, a CERA cluster region
    steps:
      - run:
          name: install vault agent (if not present)
          command: |
            vault -h && exit 0 || echo "Installing vault"
            #only runs if vault command avbove failed
            cd /tmp
            wget https://releases.hashicorp.com/vault/1.12.2/vault_1.12.2_linux_amd64.zip
            unzip vault_1.12.2_linux_amd64.zip
            sudo mv vault /usr/local/bin        
            vault -h    
      - run:
          name: Load Credentials from Vault
          command: |
            echo "Environment (APP_ENV ): $APP_ENV"
            export VAULT_ADDR="https://vault.<<parameters.region>>.circleci-labs.com"
            export VAULT_ROLE=boa-${APP_ENV}-deploy
            echo $VAULT_ROLE
            echo $CIRCLE_OIDC_TOKEN > .circleci/vault/token.json
            circleci env subst < .circleci/vault/agent.hcl.tpl > .circleci/vault/agent.hcl
            cat .circleci/vault/agent.hcl
            vault agent -config=.circleci/vault/agent.hcl
      - run:
          command: |
            source .circleci/vault/setenv
            #export for other steps
          name: Set Environment Variables from Vault
# VS Code Extension Version: 1.5.1